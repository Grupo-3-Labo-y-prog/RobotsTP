@startuml
'https://plantuml.com/class-diagram

!pragma layout smetana

'array de pedidos hechos por robot

abstract Client
class Membership
class Platinum
class Classic
class Economic
class Request
class TypeClean
class Admission
class Company
class SearchRobot
class Payment
abstract class Robot
class K311Yfl
class K311Yfu
class P011H
class K311Ya
class S031RTY


Client *-- Membership
Membership <|-- Platinum
Membership <|-- Classic
Membership <|-- Economic
Company <-- Admission
Company <-- SearchRobot
Company <- Comunication
Company *-- Robot
Company *-- Request
Request *-- Client
Request *-- TypeClean
Robot <|---K311Ya
Robot <|---S031RTY
Robot <|---P011H
Robot <|---K311Yfu
Robot <|---K311Yfl


abstract Comunication{
+printBill(Process)
+printError(Error)
input()
}

abstract class Robot{
-String model
-String surface
-boolean canOrder
-boolean canShine
-int cost
-Collection requests
}

class Company{

-HashMap clients
-HashMap robots
-Robot
-Request
-Admission admission;

'llama a admission
+void process(Request)
+String admissionOfRequest()
+Robot searchRobot()
+void update()
+void print()


}

'posible clase
class Admission{
-ArrayList requestsApproved
-ArrayList requestsReject
-Payment payment
'-ArrayList clients

'ej: pedir un ordenamiento cuando no puede
+boolean validMembership(Request)
+boolean validDebt(Client)

}


class SearchRobot{

-HashMap<String,Robot> robots
'-Request

'llama a la funcion selectRobot y recibe el robot ideal
+ Robot suitableRobot(Request)
'recibe un request y realiza una iteracion
'en la colleccion robots donde compara los requerimientos
+ Robot selectRobot(Request, String surface)
'si es Platinum compara la cola que tiene con un min y se guarda la key
'si es el primero se fija si es null y lo asigna
+ String compareRequests(Robot)
'si no es platinum compara el costo con un min y guarda la key para devolverla
+ String compareCost(Robot)
}

'posible clase lo mismo arriba


class Request{
-int ID
-String address
-Client
-boolean ordering
-TypeClean
-string surface

}

abstract Client{
-int ID
-string nombre;
-Membership
-int ordering
-int cleaning
-boolean suitable

}

class Membership{
-String type
-int limitDebt
-int limitOrder
-int limitClean
-boolean canOrder
}

class Platinum{
final static int MAX_ORDER
final static int MAX_CLEAN
final static int LIMIT_DEBT
}

@enduml